name: Demo Deploy Pipeline
on: [ push ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Set up Http Proxy
        run: export http_proxy="${{ secrets.HTTP_PROXY }}" && export https_proxy="${{ secrets.HTTP_PROXY }}"

      - name: Check out repository code
        uses: https://gitea.com/actions/checkout@v4

      - name: Set up JDK 21
        uses: https://gitea.com/actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'liberica'

      - name: Cache Gradle Wrapper
        uses: https://gitea.com/actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Gradle Init
        run: chmod +x gradlew && ./gradlew --version

      - name: Cache Gradle Wrapper
        uses: https://gitea.com/actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew assemble --no-daemon --warning-mode all --scan

      - name: Cache Gradle packages
        uses: https://gitea.com/actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test with Gradle
        run: export SPRING_DATA_REDIS_HOST=redis && ./gradlew test --no-daemon --warning-mode all --scan

      - name: Build Jar Package
        run: rm app/build/libs/*.jar && ./gradlew bootJar -i

      - name: Deploy to Docker
        run: docker compose -p kenko-drive -f docker-compose-drone.yaml up -d --build application

      - name: Gotify Notification
        if: failure()
        run: curl "${{ secrets.GOTIFY_BASE_URL }}/message?token=${{ secrets.GOTIFY_TOKEN }}" -X POST -F "title=Kenko Drive Demo"  -F "message=构建失败" -F "priority=5"

      - name: Gotify Notification
        run: curl "${{ secrets.GOTIFY_BASE_URL }}/message?token=${{ secrets.GOTIFY_TOKEN }}" -X POST -F "title=Kenko Drive Demo"  -F "message=部署完成" -F "priority=5"
